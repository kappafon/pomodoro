{"version":3,"sources":["containers/pomodoro.tsx","components/timer.tsx","components/workControl.tsx","components/breakControl.tsx","containers/timerControl.tsx","components/startStopControl.tsx","components/resetControl.tsx","containers/runControl.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["CycleType","Timer","props","className","id","cycle","Math","floor","seconds","slice","WorkControl","onClick","event","workTime","changeWorkTime","BreakControl","breakTime","changeBreakTime","TimerControl","StartStopControl","ResetControl","RunControl","onStartStopClick","onResetClick","initialState","isPaused","Session","Pomodoro","audio","React","setIsPaused","setCycle","setWorkTime","setBreakTime","setSeconds","current","play","Break","interval","setInterval","console","log","clearInterval","value","pause","currentTime","preload","src","ref","App","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","error","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e0de6178.chunk.js","sourcesContent":["import * as React from 'react'\r\nimport './pomodoro.scss'\r\nimport Timer from '../components/timer'\r\nimport TimerControl from './timerControl'\r\nimport RunControl from './runControl'\r\n\r\nexport enum CycleType {\r\n    Session = 'Session',\r\n    Break = 'Break',\r\n}\r\n\r\nconst initialState = {\r\n    isPaused: true,\r\n    cycle: CycleType.Session,\r\n    seconds: 25 * 60,\r\n    workTime: 25,\r\n    breakTime: 5,\r\n}\r\n\r\nexport interface PomodoroProps {}\r\nconst Pomodoro: React.FC<PomodoroProps> = props => {\r\n    let audio: React.RefObject<HTMLAudioElement> = React.createRef()\r\n\r\n    // React.useEffect(() => {\r\n    //     if (props.pressed) audio.current!.play()\r\n    // })\r\n\r\n    const [isPaused, setIsPaused] = React.useState<boolean>(initialState.isPaused)\r\n    const [cycle, setCycle] = React.useState<CycleType>(initialState.cycle)\r\n    const [workTime, setWorkTime] = React.useState<number>(initialState.workTime)\r\n    const [breakTime, setBreakTime] = React.useState<number>(initialState.breakTime)\r\n    const [seconds, setSeconds] = React.useState<number>(initialState.seconds)\r\n\r\n    const changeWorkTime = (value: number) => {\r\n        setWorkTime(value)\r\n        setSeconds(value * 60)\r\n    }\r\n\r\n    const changeBreakTime = (value: number) => {\r\n        setBreakTime(value)\r\n    }\r\n\r\n    const onResetClick = () => {\r\n        setIsPaused(true)\r\n        setCycle(initialState.cycle)\r\n        setWorkTime(initialState.workTime)\r\n        setBreakTime(initialState.breakTime)\r\n\r\n        setSeconds(25 * 60)\r\n\r\n        audio.current!.pause()\r\n        audio.current!.currentTime = 0\r\n    }\r\n\r\n    function startTimer() {\r\n        setIsPaused(false)\r\n    }\r\n    function pauseTimer() {\r\n        setIsPaused(true)\r\n    }\r\n\r\n    React.useEffect(() => {\r\n        if (!seconds) {\r\n            audio.current!.play()\r\n            if (cycle === CycleType.Session) {\r\n                setCycle(CycleType.Break)\r\n                setSeconds(breakTime * 60)\r\n            }\r\n            if (cycle === CycleType.Break) {\r\n                setCycle(CycleType.Session)\r\n                setSeconds(workTime * 60)\r\n            }\r\n            return\r\n        }\r\n        const interval = setInterval(() => {\r\n            console.log(seconds)\r\n            if (!isPaused) {\r\n                setSeconds(seconds - 1)\r\n            }\r\n        }, 1000)\r\n        return () => {\r\n            clearInterval(interval)\r\n        }\r\n    }, [seconds, isPaused])\r\n\r\n    return (\r\n        <div className=\"pomodoro\">\r\n            <main className=\"pomodoro__container\" id=\"pomodoro\">\r\n                <h1>Pomodoro Clock</h1>\r\n                <Timer cycle={cycle} seconds={seconds} />\r\n                <TimerControl\r\n                    workTime={workTime}\r\n                    changeWorkTime={changeWorkTime}\r\n                    breakTime={breakTime}\r\n                    changeBreakTime={changeBreakTime}\r\n                />\r\n                <RunControl\r\n                    onResetClick={onResetClick}\r\n                    onStartStopClick={isPaused ? startTimer : pauseTimer}\r\n                />\r\n                <audio id=\"beep\" preload=\"auto\" src=\"https://goo.gl/65cBl1\" ref={audio} />\r\n            </main>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Pomodoro\r\n","import * as React from 'react'\r\nimport './timer.scss'\r\nimport { CycleType } from '../containers/pomodoro'\r\n\r\nexport interface DisplayProps {\r\n    cycle: CycleType\r\n    seconds: number\r\n}\r\n\r\nconst Timer: React.FC<DisplayProps> = props => {\r\n    const renderSeconds = () => {\r\n        const seconds = '00' + (props.seconds % 60)\r\n        return seconds.slice(-2)\r\n    }\r\n\r\n    const renderMinutes = () => {\r\n        const minutes = '00' + Math.floor(props.seconds / 60)\r\n        return minutes.slice(-2)\r\n    }\r\n\r\n    return (\r\n        <section className=\"timer__container\">\r\n            <span id=\"timer-label\">{CycleType[props.cycle]}</span>\r\n            <div id=\"time-left\">\r\n                {renderMinutes()}:{renderSeconds()}\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default Timer\r\n","import * as React from 'react'\r\nimport './workControl.scss'\r\n\r\nexport interface WorkControlProps {\r\n    workTime: number\r\n    changeWorkTime(value: number): void\r\n}\r\n\r\nconst WorkControl: React.FC<WorkControlProps> = props => {\r\n    // let audio: React.RefObject<HTMLAudioElement> = React.createRef()\r\n\r\n    // React.useEffect(() => {\r\n    //     if (props.pressed) audio.current!.play()\r\n    // })\r\n\r\n    const onPlusClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (props.workTime === 60) return\r\n        props.changeWorkTime(props.workTime + 1)\r\n    }\r\n\r\n    const onMinusClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (props.workTime === 1) return\r\n        props.changeWorkTime(props.workTime - 1)\r\n    }\r\n\r\n    return (\r\n        <div id=\"temp\" className=\"work-control__container\">\r\n            <h2 id=\"session-label\">Session Length</h2>\r\n            <button id=\"session-decrement\" onClick={onMinusClick}>\r\n                -\r\n            </button>\r\n            <span id=\"session-length\">{props.workTime}</span>\r\n            <button id=\"session-increment\" onClick={onPlusClick}>\r\n                +\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default WorkControl\r\n","import * as React from 'react'\r\nimport './breakControl.scss'\r\n\r\nexport interface BreakControlProps {\r\n    breakTime: number\r\n    changeBreakTime(value: number): void\r\n}\r\n\r\nconst BreakControl: React.FC<BreakControlProps> = props => {\r\n    // let audio: React.RefObject<HTMLAudioElement> = React.createRef()\r\n\r\n    // React.useEffect(() => {\r\n    //     if (props.pressed) audio.current!.play()\r\n    // })\r\n\r\n    const onPlusClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (props.breakTime === 60) return\r\n        props.changeBreakTime(props.breakTime + 1)\r\n    }\r\n\r\n    const onMinusClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        if (props.breakTime === 1) return\r\n        props.changeBreakTime(props.breakTime - 1)\r\n    }\r\n\r\n    return (\r\n        <div className=\"break-control__container\">\r\n            <h2 id=\"break-label\">Break Length</h2>\r\n            <button id=\"break-decrement\" onClick={onMinusClick}>\r\n                -\r\n            </button>\r\n            <span id=\"break-length\">{props.breakTime}</span>\r\n            <button id=\"break-increment\" onClick={onPlusClick}>\r\n                +\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default BreakControl\r\n","import * as React from 'react'\r\nimport './timerControl.scss'\r\nimport WorkControl from '../components/workControl'\r\nimport BreakControl from '../components/breakControl'\r\n\r\nexport interface TimerControlProps {\r\n    workTime: number\r\n    changeWorkTime(value: number): void\r\n    breakTime: number\r\n    changeBreakTime(value: number): void\r\n}\r\n\r\nconst TimerControl: React.FC<TimerControlProps> = props => {\r\n    return (\r\n        <section className=\"timer-control__container\">\r\n            <div className=\"timer-control__controls\">\r\n                <BreakControl breakTime={props.breakTime} changeBreakTime={props.changeBreakTime} />\r\n                <WorkControl workTime={props.workTime} changeWorkTime={props.changeWorkTime} />\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default TimerControl\r\n","import * as React from 'react'\r\nimport './startStopControl.scss'\r\n\r\nexport interface StartStopControlProps {\r\n    onClick(): void\r\n}\r\n\r\nconst StartStopControl: React.FC<StartStopControlProps> = props => {\r\n    const onClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        props.onClick()\r\n    }\r\n\r\n    return (\r\n        <button id=\"start_stop\" onClick={onClick}>\r\n            START/STOP\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default StartStopControl\r\n","import * as React from 'react'\r\nimport './resetControl.scss'\r\n\r\nexport interface ResetControlProps {\r\n    onClick(): void\r\n}\r\n\r\nconst ResetControl: React.FC<ResetControlProps> = props => {\r\n    const onClick = (event: React.MouseEvent<HTMLButtonElement, MouseEvent>) => {\r\n        props.onClick()\r\n    }\r\n\r\n    return (\r\n        <button id=\"reset\" onClick={onClick}>\r\n            RESET\r\n        </button>\r\n    )\r\n}\r\n\r\nexport default ResetControl\r\n","import * as React from 'react'\r\nimport './runControl.scss'\r\nimport StartStopControl from '../components/startStopControl'\r\nimport ResetControl from '../components/resetControl'\r\n\r\nexport interface RunControlProps {\r\n    onStartStopClick(): void\r\n    onResetClick(): void\r\n}\r\n\r\nconst RunControl: React.FC<RunControlProps> = props => {\r\n    return (\r\n        <section className=\"run-control__container\">\r\n            <div className=\"run-control__controls\">\r\n                <StartStopControl onClick={props.onStartStopClick} />\r\n                <ResetControl onClick={props.onResetClick} />\r\n            </div>\r\n        </section>\r\n    )\r\n}\r\n\r\nexport default RunControl\r\n","import React from 'react'\r\nimport './App.scss'\r\nimport Pomodoro from './containers/pomodoro'\r\n\r\nconst App: React.FC = () => {\r\n    return <Pomodoro />\r\n}\r\n\r\nexport default App\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register()\n"],"sourceRoot":""}